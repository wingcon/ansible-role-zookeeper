---
- name: Create zookeeper user and group
  include_role:
    name: users
  vars:
    users:
      - username: "{{ zookeeper_system_user }}"
        name: "{{ zookeeper_system_user }}"
        home: "{{ zookeeper_install_dir }}"
        shell: /usr/sbin/nologin
        is_system_user: true
    groups_to_create:
      - name: "{{ zookeeper_system_user }}"

- name: Change zookeeper_install_dir ownership, group and permissions
  file:
    path: "{{ zookeeper_install_dir }}"
    owner: "{{ zookeeper_system_user }}"
    group: "{{ zookeeper_system_user }}"
    mode: '0700'
    state: directory
    recurse: yes

- name: Change zookeeper_log_dir ownership, group and permissions
  file:
    path: "{{ zookeeper_log_dir }}"
    owner: "{{ zookeeper_system_user }}"
    group: "{{ zookeeper_system_user }}"
    mode: '0744'
    state: directory
    recurse: yes

- name: Change data_dir ownership, group and permissions
  file:
    path: "{{ zookeeper_data_dir }}"
    owner: "{{ zookeeper_system_user }}"
    group: "{{ zookeeper_system_user }}"
    mode: '0744'
    state: directory

- name: Change version_dir ownership, group and permissions
  file:
    path: "{{ zookeeper_version_data_dir }}"
    owner: "{{ zookeeper_system_user }}"
    group: "{{ zookeeper_system_user }}"
    mode: '0744'
    state: directory
    recurse: yes

- name: Configure logger settings
  lineinfile:
    dest: "{{ zookeeper_log_config_dir }}/log4j.properties"
    regexp: "^#?{{ item.option }}\\s*=.+$"
    line: "{{ item.option }}={{ item.value }}"
    state: "{{ item.state | default('present') }}"
  with_items: "{{ zookeeper_logger_config_options }}"
  notify: restart zookeeper

- name: own service id
  set_fact:
    own_zookeeper_id: "{{ ansible_loop.index }}"
  when: item == ansible_hostname or item in ansible_all_ipv4_addresses or item == 'localhost' or 'host' in item and (item.host == ansible_hostname or item.host in ansible_all_ipv4_addresses or item.host == 'localhost')
  loop: "{{ zookeeper_servers }}"
  loop_control:
    extended: yes

- name: assert one of given servers matched own host or ip 
  assert:
    that: "{{ own_zookeeper_id is defined }}"

- name: Configure myid file
  copy:
    content: '{{ own_zookeeper_id }}'
    dest: "{{ zookeeper_data_dir }}/myid"
  notify:
    - reset zookeeper data
    - restart zookeeper

# this is done separately form the above step so a permission change will not reset the data dir and not restart the service
- name: set myid file permission/owner
  file:
    path: "{{ zookeeper_data_dir }}/myid"
    owner: "{{ zookeeper_system_user }}"
    group: "{{ zookeeper_system_user }}"
    mode: '0644'

- name: write zookeeper config
  template:
    src: templates/zoo.cfg.j2
    dest: "{{ zookeeper_config_dir }}/{{ zookeeper_config_name }}.cfg"
    mode: '0444'
  notify: restart zookeeper

- name: write zookeeper service
  template:
    src: templates/zookeeper.service.j2
    dest: "{{ zookeeper_systemd_dir }}/{{ zookeeper_service_name }}.service"
    mode: '0444'
  notify: restart zookeeper

- name: enable zookeeper service
  systemd:
    name: "{{ zookeeper_service_name }}"
    state: "{{ zookeeper_enabled | ternary('started', 'stopped') }}"
    enabled: "{{ zookeeper_enabled }}"
    daemon_reload: yes
