#
# Ansible managed
#
# Enable/disable the HTTP based command interface
admin.enableServer={{ zookeeper_admin_server_enabled | default(True) | ternary('true', 'false') }}
# Configure the AdminServer port
admin.serverPort={{ zookeeper_admin_server_port | default(8080) }}
admin.commandURL={{ zookeeper_admin_server_url | default("/commands") }}
# The number of milliseconds of each tick
tickTime={{ zookeeper_tick_time | default(2000) }}
# The number of ticks that the initial 
# synchronization phase can take
initLimit={{ zookeeper_init_limit | default(10) }}
# The number of ticks that can pass between 
# sending a request and getting an acknowledgement
syncLimit={{ zookeeper_sync_limit | default(5) }}
# the directory where the snapshot is stored.
# do not use /tmp for storage, /tmp here is just 
# example sakes.
dataDir={{ zookeeper_data_dir }}
# the port at which the clients will connect
clientPort={{ zookeeper_client_port | default(2181) }}
# the maximum number of client connections.
# increase this if you need to handle more clients
maxClientCnxns={{ zookeeper_max_clients | default(60) }}
minSessionTimeout={{ zookeeper_min_session_timeout | default(10000) }}
maxSessionTimeout={{ zookeeper_max_session_timeout | default(60000) }}
#
# Be sure to read the maintenance section of the 
# administrator guide before turning on autopurge.
#
# http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance
#
# The number of snapshots to retain in dataDir
autopurge.snapRetainCount={{ zookeeper_snap_retain | default(3) }}
# Purge task interval in hours
# Set to "0" to disable auto purge feature
autopurge.purgeInterval={{ zookeeper_purge_interval | default(3) }}
# allowed 4letter words
4lw.commands.whitelist={{ zookeeper_allowed_4lw | default('srvr') }}
# The server setup follows
{% for server in zookeeper_servers %}
server.{{ loop.index }}={% if server is mapping %}{{ server.host }}{% else %}{{ server }}{% endif %}:{% if 'service_port_a' in server %}{{ server.service_port_a }}{% else %}{{ zookeeper_default_service_port_a }}{% endif %}:{% if 'service_port_b' in server %}{{ server.service_port_b }}{% else %}{{ zookeeper_default_service_port_b }}{% endif %}

{% if 'weight' in server %}weight.{{ loop.index }}={{ server.weight }}

{% endif %}
{% endfor %}
{% for group in zookeeper_groups %}
group.{{ loop.index }}={% for server in group %}{{ server }}{% if not loop.last %}:{% endif %}{% endfor %}

{% endfor %}
